version: '3.8'

services:
  backend:
    build:
      context: .
      target: dev
    command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229 server.js
    ports:
      - '80:5000'
      - '9229:9229'
      - '9230:9230'
    volumes:
      - ./backend:/opt/node_app/app
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # NOTE: this won't work on Docker Toolbox (virtualbox) which doesn't bind-mount single files
      - ./package.json:/opt/nope_app/package.json
      - ./package-lock.json:/opt/nope_app/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/nope_app/app/node_modules
    environment:
      - NODE_ENV=development
      - MONGO_USERNAME=root
      - MONGO_PASSWORD=example
      - MONGO_HOSTNAME=mongo
      - MONGO_PORT=27017
      - MONGO_DATABASE_NAME=example-database
    healthcheck:
      test: curl -f http://127.0.0.1:5000
    networks:
      - separate_network
  frontend:
    build:
      context: ./frontend
      target: dev
    ports:
      - '8080:3000'
    volumes:
      - ./frontend:/opt/node_app/app
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # NOTE: this won't work on Docker Toolbox (virtualbox) which doesn't bind-mount single files
      - ./frontend/package.json:/opt/nope_app/package.json
      - ./frontend/package-lock.json:/opt/nope_app/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/nope_app/app/node_modules
    environment:
      # according to create react app docs: "You must create custom environment variables beginning with REACT_APP_"
      # You must add the port you exposed to
      - REACT_APP_REST_PORT=80
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - separate_network

# docker-compose set up a default network between the containers, but if we want to run multiple apps in separate virtual networks we need to define the network explicitly
networks:
  separate_network:
    driver: bridge

volumes:
  notused:
